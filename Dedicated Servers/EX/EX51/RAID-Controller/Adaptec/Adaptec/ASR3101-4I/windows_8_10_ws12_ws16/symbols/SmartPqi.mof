#pragma autorecover
#pragma classflags("forceupdate")
#pragma namespace("\\\\.\\root\\WMI")
//
// WPP Generated File
// PDB:  c:\jenkins\workspace\SmartPqi_rel-SR2.5.2_200211_106.178.0\build\2016\x64\Release\SmartPqi\\symbols\SmartPqi.pdb
// PDB:  Last Updated :2020-02-11:20:20:08:129 (UTC) [tracepdb]
//

//ModuleName = SmartPqiSmartPqiTraceGuid	 (Init called in Function DriverEntry)
[Dynamic,
 Description("SmartPqi_SmartPqiTraceGuid"),
 guid("{9DD3B5A6-035B-43B8-84E1-B8B6B5207BD6}"),
 locale("MS\\0x409")]
class SmartPqiSmartPqiTraceGuid : EventTrace
{
    [Description ("Enable Flags") : amended,
        ValueDescriptions{
             "DbgFlagInit Flag",
             "DbgFlagPnp Flag",
             "DbgFlagPower Flag",
             "DbgFlagShutdown Flag",
             "DbgFlagRescan Flag",
             "DbgFlagEnum Flag",
             "DbgFlagRegistry Flag",
             "DbgFlagResets Flag",
             "DbgFlagIo Flag",
             "DbgFlagIoctl Flag",
             "DbgFlagIsr Flag",
             "DbgFlagScatterGather Flag",
             "DbgFlagWmi Flag",
             "DbgFlagHeartBeat Flag",
             "DbgFlagTimer Flag",
             "DbgFlagOfa Flag",
             "DbgFlagEvent Flag",
             "DbgFlagCpu Flag",
             "DbgFlagMemory Flag",
             "DbgFlagCtrlrInfo Flag",
             "DbgFlagPqi Flag",
             "DbgFlagLast Flag"},
        DefineValues{
             "DbgFlagInit",
             "DbgFlagPnp",
             "DbgFlagPower",
             "DbgFlagShutdown",
             "DbgFlagRescan",
             "DbgFlagEnum",
             "DbgFlagRegistry",
             "DbgFlagResets",
             "DbgFlagIo",
             "DbgFlagIoctl",
             "DbgFlagIsr",
             "DbgFlagScatterGather",
             "DbgFlagWmi",
             "DbgFlagHeartBeat",
             "DbgFlagTimer",
             "DbgFlagOfa",
             "DbgFlagEvent",
             "DbgFlagCpu",
             "DbgFlagMemory",
             "DbgFlagCtrlrInfo",
             "DbgFlagPqi",
             "DbgFlagLast"},
        Values{
             "DbgFlagInit",
             "DbgFlagPnp",
             "DbgFlagPower",
             "DbgFlagShutdown",
             "DbgFlagRescan",
             "DbgFlagEnum",
             "DbgFlagRegistry",
             "DbgFlagResets",
             "DbgFlagIo",
             "DbgFlagIoctl",
             "DbgFlagIsr",
             "DbgFlagScatterGather",
             "DbgFlagWmi",
             "DbgFlagHeartBeat",
             "DbgFlagTimer",
             "DbgFlagOfa",
             "DbgFlagEvent",
             "DbgFlagCpu",
             "DbgFlagMemory",
             "DbgFlagCtrlrInfo",
             "DbgFlagPqi",
             "DbgFlagLast"},
        ValueMap{
             "0x00000001",
             "0x00000002",
             "0x00000004",
             "0x00000008",
             "0x00000010",
             "0x00000020",
             "0x00000040",
             "0x00000080",
             "0x00000100",
             "0x00000200",
             "0x00000400",
             "0x00000800",
             "0x00001000",
             "0x00002000",
             "0x00004000",
             "0x00008000",
             "0x00010000",
             "0x00020000",
             "0x00040000",
             "0x00080000",
             "0x00100000",
             "0x00200000"}: amended
    ]
    uint32 Flags;
    [Description ("Levels") : amended,
        ValueDescriptions{
            "Abnormal exit or termination",
            "Severe errors that need logging",
            "Warnings such as allocation failure",
            "Includes non-error cases",
            "Detailed traces from intermediate steps" } : amended,
         DefineValues{
            "TRACE_LEVEL_FATAL",
            "TRACE_LEVEL_ERROR",
            "TRACE_LEVEL_WARNING"
            "TRACE_LEVEL_INFORMATION",
            "TRACE_LEVEL_VERBOSE" },
        Values{
            "Fatal",
            "Error",
            "Warning",
            "Information",
            "Verbose" },
        ValueMap{
            "0x1",
            "0x2",
            "0x3",
            "0x4",
            "0x5" },
        ValueType("index")
    ]
    uint32 Level;
};
